[workspace]
members = [
    "crates/nebula-action",
    "crates/nebula-config",
    "crates/nebula-core",
    "crates/nebula-credential",
    "crates/nebula-error",
    "crates/nebula-expression",
    "crates/nebula-log",
    "crates/nebula-memory",
    "crates/nebula-parameter",
    "crates/nebula-resilience",
    "crates/nebula-resource",
    "crates/nebula-system",
    "crates/nebula-validator",
    "crates/nebula-value",
]
exclude = [
    "crates/*/fuzz",
]
resolver = "3"

[workspace.package]
version = "0.1.0"
edition = "2024"
rust-version = "1.90"
keywords = ["workflow", "integrations", "no-code", "low-code", "automation"]
authors = ["Vanya Stafford <vanya.john.stafford@gmail.com>"]
description = "Workflow automation toolkit"
license = "MIT OR Apache-2.0"
repository = "https://github.com/vanyastaff/nebula"
homepage = "https://github.com/vanyastaff/nebula"
documentation = "https://docs.rs/nebula"

[workspace.dependencies]
# Async runtime
tokio = { version = "1.47.1", features = ["rt", "rt-multi-thread", "macros", "sync", "time", "fs"] }
rayon = { version = "1.11.0" }
async-trait = "0.1.89"

# Serialization
serde = { version = "1.0.219", features = ["derive", "rc"] }
serde_json = "1.0.143"
serde_with = "3.14.0"

# Logging and tracing
thiserror = {version = "2.0.16" }
anyhow = "1.0.99"
tracing = "0.1.41"
tracing-subscriber = { version = "0.3.20",default-features = false }


# Data structures
domain-key = { version = "0.1.1", features = ["serde"] }
bon = {version = "3.7.2"}
uuid = { version = "1.18.1", features = ["v4", "serde"] }
chrono = { version = "0.4.41", features = ["serde"] }

# Utility
futures = "0.3.31"
bytes = "1.10"

# Testing
pretty_assertions = "1.4"
mockall = "0.13.0"
tempfile = "3.21"


[profile.dev]
opt-level = 0
debug = true
split-debuginfo = "unpacked"
incremental = true


[profile.release]
opt-level = 3
lto = "thin"
codegen-units = 1
strip = "debuginfo"
panic = "abort"

[profile.test]
opt-level = 0
debug = true


[workspace.lints.rust]
rust_2018_idioms = { level = "deny", priority = -1 }

# Documentation - allow until MVP documentation phase
missing_docs = "allow"
unreachable_pub = "allow"

# Dead/unused code - allow until cleanup phase
dead_code = "allow"
unused_imports = "allow"
unused_import_braces = "allow"
unused_lifetimes = "allow"
unused_variables = "allow"
elided_lifetimes_in_paths = "allow"

# Safety - keep strict for now
unsafe_code = "allow"  # We have unsafe code in memory management
unsafe_op_in_unsafe_fn = "deny"  # Edition 2024: require explicit unsafe blocks

[workspace.lints.clippy]
# Existing
dbg_macro = "warn"
todo = "warn"

# Pedantic (enable most, selectively allow problematic ones)
pedantic = { level = "warn", priority = -1 }
module_name_repetitions = "allow"
missing_errors_doc = "allow"
missing_panics_doc = "allow"

# Documentation - allow until MVP
missing_docs_in_private_items = "allow"
missing_inline_in_public_items = "allow"

# Dead/unused code cleanup - allow for now
unused_self = "allow"

# Code quality - keep some strict, allow others temporarily
cast_possible_truncation = "allow"
cast_precision_loss = "allow"
cast_sign_loss = "allow"
cast_possible_wrap = "allow"
similar_names = "allow"
too_many_lines = "allow"
struct_excessive_bools = "allow"
wildcard_imports = "allow"
missing_copy_implementations = "allow"
missing_debug_implementations = "allow"

# These are code quality, not documentation - keep warning
# trivial_casts = "warn"  (default)
# unnecessary_wraps = "warn"  (default)
# missing_const_for_fn = "warn"  (default)

# Restriction (selective) - strict checks we want to keep
unwrap_used = "deny"  # Strengthened: force proper error handling
expect_used = "warn"
panic = "warn"
unimplemented = "warn"
must_use_candidate = "warn"  # Suggest #[must_use] where appropriate
missing_safety_doc = "allow"  # TODO: Add SAFETY docs when ready
undocumented_unsafe_blocks = "allow"  # TODO: Add SAFETY comments when ready

# Performance
large_enum_variant = "warn"
large_stack_arrays = "warn"

# Correctness (already enabled by default, but be explicit)
correctness = { level = "deny", priority = -1 }

[workspace.lints.rustdoc]
all = "allow"  # TODO: Enable when ready for documentation before MVP



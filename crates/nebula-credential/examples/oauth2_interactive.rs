//! Interactive OAuth2 Authorization Code flow tester
//!
//! This example walks you through the complete OAuth2 flow step by step

use nebula_credential::prelude::*;
use std::collections::HashMap;
use std::io::{self, Write};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
    println!("‚ïë  Interactive OAuth2 Authorization Code Flow Tester           ‚ïë");
    println!("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");

    // Example URL from OAuth Playground:
    // https://authorization-server.com/authorize?
    //   response_type=code
    //   &client_id=AxIKkzEyzIqNUvLUvftnL57O
    //   &redirect_uri=https://www.oauth.com/playground/authorization-code.html
    //   &scope=photo+offline_access
    //   &state=gNYGdoXUeHwh8sAJ

    println!("–î–∞–≤–∞–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º OAuth2 flow! üöÄ\n");

    // Step 1: Get configuration
    let config = get_oauth_config()?;

    // Step 2: Initialize flow and get authorization URL
    let (partial_state, auth_url, state_param) = generate_authorization_url(&config).await?;

    // Step 3: User authorizes
    println!("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
    println!("üìã –®–∞–≥ 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
    println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");

    println!("üåê Authorization URL:\n");
    println!("{}\n", auth_url);

    println!("üëâ –î–µ–π—Å—Ç–≤–∏—è:");
    println!("  1. –°–∫–æ–ø–∏—Ä—É–π URL –≤—ã—à–µ");
    println!("  2. –û—Ç–∫—Ä–æ–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ");
    println!("  3. –ù–∞–∂–º–∏ 'Authorize' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ OAuth Playground");
    println!("  4. –¢–µ–±—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–Ω–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º 'code'\n");

    // Step 4: Get authorization code from user
    print!("–í–≤–µ–¥–∏ –ø–æ–ª–Ω—ã–π redirect URL (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ 'code' –ø–∞—Ä–∞–º–µ—Ç—Ä): ");
    io::stdout().flush()?;

    let mut callback_input = String::new();
    io::stdin().read_line(&mut callback_input)?;
    let callback_input = callback_input.trim();

    // Parse code and state from input
    let (code, received_state) = parse_callback(callback_input)?;

    let code_preview = &code[..20.min(code.len())];
    println!("\n‚úÖ –ü–æ–ª—É—á–µ–Ω authorization code: {}...", code_preview);
    println!("‚úÖ State parameter: {}", received_state);

    // Verify state
    if received_state != state_param {
        println!("\n‚ùå –û–®–ò–ë–ö–ê: State –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!");
        println!("   –û–∂–∏–¥–∞–ª—Å—è: {}", state_param);
        println!("   –ü–æ–ª—É—á–µ–Ω:  {}", received_state);
        return Err("State mismatch - –≤–æ–∑–º–æ–∂–Ω–∞—è CSRF –∞—Ç–∞–∫–∞".into());
    }

    println!("‚úÖ State –ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ\n");

    // Step 5: Exchange code for token
    println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
    println!("üîÑ –®–∞–≥ 3: –û–±–º–µ–Ω code –Ω–∞ access token");
    println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");

    let token_result =
        exchange_code_for_token(&config, partial_state, code.clone(), received_state.clone()).await;

    match token_result {
        Ok(state) => {
            println!("üéâ –£—Å–ø–µ—Ö! Access token –ø–æ–ª—É—á–µ–Ω!\n");
            println!("üìä Token –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:");
            println!("  ‚Ä¢ Token Type: {}", state.token_type);
            println!("  ‚Ä¢ Expires At: {} (unix timestamp)", state.expires_at);
            println!("  ‚Ä¢ Has Refresh Token: {}", state.refresh_token.is_some());

            let access_token_preview = state.access_token.expose();
            let preview_len = 30.min(access_token_preview.len());
            println!(
                "  ‚Ä¢ Access Token: {}...",
                &access_token_preview[..preview_len]
            );

            println!("\n‚úÖ OAuth2 flow –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ code –Ω–∞ token:");
            println!("   {}\n", e);

            println!("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
            println!("  ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π authorization code");
            println!("  ‚Ä¢ Code —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω");
            println!("  ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π redirect_uri");
            println!("  ‚Ä¢ –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è code");
            println!("  ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π client_secret");
        }
    }

    Ok(())
}

struct OAuthConfig {
    client_id: String,
    client_secret: Option<String>,
    auth_endpoint: String,
    token_endpoint: String,
    redirect_uri: String,
    scopes: Vec<String>,
    use_pkce: bool,
}

fn get_oauth_config() -> Result<OAuthConfig, Box<dyn std::error::Error>> {
    println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
    println!("üìã –®–∞–≥ 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OAuth2");
    println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");

    println!("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:");
    println!("   1. –û—Ç–∫—Ä–æ–π https://www.oauth.com/playground/");
    println!("   2. –í—ã–±–µ—Ä–∏ 'Authorization Code' –∏–ª–∏ 'PKCE'");
    println!("   3. Playground –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ Client ID –∏ Client Secret\n");

    // Prompt for flow type
    println!("–ö–∞–∫–æ–π flow —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?");
    println!("  1) Authorization Code (—Å client secret)");
    println!("  2) PKCE (–±–µ–∑ client secret, –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)\n");

    print!("–í—ã–±–µ—Ä–∏ (1 –∏–ª–∏ 2): ");
    io::stdout().flush()?;
    let mut flow_choice = String::new();
    io::stdin().read_line(&mut flow_choice)?;
    let use_pkce = flow_choice.trim() == "2";

    println!();

    // Get Client ID
    print!("üìù Client ID (–∏–∑ OAuth Playground): ");
    io::stdout().flush()?;
    let mut client_id = String::new();
    io::stdin().read_line(&mut client_id)?;
    let client_id = client_id.trim().to_string();

    if client_id.is_empty() {
        return Err("Client ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω".into());
    }

    // Get Client Secret (optional for PKCE)
    let client_secret = if use_pkce {
        println!("‚úì PKCE —Ä–µ–∂–∏–º - Client Secret –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
        None
    } else {
        print!("üîë Client Secret: ");
        io::stdout().flush()?;
        let mut secret = String::new();
        io::stdin().read_line(&mut secret)?;
        let secret = secret.trim();

        if secret.is_empty() {
            None
        } else {
            Some(secret.to_string())
        }
    };

    println!("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:");
    println!(
        "  ‚Ä¢ Flow Type: {}",
        if use_pkce {
            "PKCE"
        } else {
            "Authorization Code"
        }
    );
    println!("  ‚Ä¢ Client ID: {}", client_id);
    println!(
        "  ‚Ä¢ Client Secret: {}",
        if client_secret.is_some() {
            "***"
        } else {
            "None"
        }
    );

    Ok(OAuthConfig {
        client_id,
        client_secret,
        auth_endpoint: "https://authorization-server.com/authorize".to_string(),
        token_endpoint: "https://authorization-server.com/token".to_string(),
        redirect_uri: "https://www.oauth.com/playground/authorization-code.html".to_string(),
        scopes: vec!["photo".to_string(), "offline_access".to_string()],
        use_pkce,
    })
}

async fn generate_authorization_url(
    config: &OAuthConfig,
) -> Result<(PartialState, String, String), Box<dyn std::error::Error>> {
    println!("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
    println!("üîó –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Authorization URL");
    println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");

    let credential = OAuth2AuthorizationCode::new();
    let mut ctx = CredentialContext::new();

    let input = AuthorizationCodeInput {
        client_id: config.client_id.clone(),
        client_secret: config.client_secret.clone(),
        authorization_endpoint: config.auth_endpoint.clone(),
        token_endpoint: config.token_endpoint.clone(),
        redirect_uri: config.redirect_uri.clone(),
        scopes: config.scopes.clone(),
        use_pkce: config.use_pkce,
    };

    match credential.initialize(&input, &mut ctx).await? {
        InitializeResult::Pending {
            partial_state,
            next_step,
        } => {
            if let InteractionRequest::Redirect {
                url,
                validation_params,
                ..
            } = next_step
            {
                let state_param = validation_params
                    .get("state")
                    .expect("State parameter missing")
                    .clone();

                println!("‚úÖ Authorization URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");

                if config.use_pkce {
                    println!("üîê PKCE –≤–∫–ª—é—á–µ–Ω:");
                    if url.contains("code_challenge") {
                        println!("   ‚úì code_challenge –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
                        println!("   ‚úì code_challenge_method=S256");
                    }
                }

                Ok((partial_state, url, state_param))
            } else {
                Err("Unexpected interaction type".into())
            }
        }
        _ => Err("Expected Pending result".into()),
    }
}

fn parse_callback(input: &str) -> Result<(String, String), Box<dyn std::error::Error>> {
    // Handle both full URL and just parameters
    let query_string = if input.contains("?") {
        input.split('?').nth(1).unwrap_or(input)
    } else {
        input
    };

    let mut code = None;
    let mut state = None;

    for pair in query_string.split('&') {
        let mut parts = pair.split('=');
        let key = parts.next().unwrap_or("");
        let value = parts.next().unwrap_or("");

        match key {
            "code" => code = Some(value.to_string()),
            "state" => state = Some(value.to_string()),
            _ => {}
        }
    }

    let code = code.ok_or("Missing 'code' parameter")?;
    let state = state.ok_or("Missing 'state' parameter")?;

    Ok((code, state))
}

async fn exchange_code_for_token(
    config: &OAuthConfig,
    partial_state: PartialState,
    code: String,
    state: String,
) -> Result<OAuth2State, Box<dyn std::error::Error>> {
    let credential = OAuth2AuthorizationCode::new();
    let mut ctx = CredentialContext::new();

    let mut params = HashMap::new();
    params.insert("code".to_string(), code);
    params.insert("state".to_string(), state);

    let user_input = UserInput::Callback { params };

    println!("üîÑ –û–±–º–µ–Ω–∏–≤–∞–µ–º code –Ω–∞ token...");
    println!("   Endpoint: {}\n", config.token_endpoint);

    match credential
        .continue_initialization(partial_state, user_input, &mut ctx)
        .await?
    {
        InitializeResult::Complete(state) => Ok(state),
        other => Err(format!("Unexpected result: {:?}", other).into()),
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_parse_full_url() {
        let url =
            "https://www.oauth.com/playground/authorization-code.html?code=ABC123&state=XYZ789";
        let (code, state) = parse_callback(url).unwrap();
        assert_eq!(code, "ABC123");
        assert_eq!(state, "XYZ789");
    }

    #[test]
    fn test_parse_params_only() {
        let params = "code=ABC123&state=XYZ789";
        let (code, state) = parse_callback(params).unwrap();
        assert_eq!(code, "ABC123");
        assert_eq!(state, "XYZ789");
    }
}

[package]
name = "nebula-memory"
version.workspace = true
authors.workspace = true
edition = "2021"
rust-version = "1.85.0"
license.workspace = true
repository.workspace = true
homepage.workspace = true
documentation.workspace = true
readme = "README.md"
keywords = ["memory", "allocation", "pool", "arena", "cache"]
categories = ["memory-management", "data-structures", "caching", "no-std"]
exclude = [
    "benches/results/*",
    "scripts/*.sh",
    ".github/",
    "docs/design/",
    "tests/stress/",
    "*.profraw",
    "*.profdata",
]

[features]
default = ["std", "pool", "arena", "cache", "stats", "profiling", "streaming"]

## Core Environment ##
std = ["dep:once_cell", "dep:thiserror", "alloc"]
alloc = []
backtrace = ["dep:backtrace"]

## Core Components ##
pool = ["dep:parking_lot", "alloc"]
arena = ["alloc"]
cache = ["dep:hashbrown", "alloc", "dep:bincode"]
cow = ["dep:parking_lot", "alloc"]

## Advanced Features ##
lockfree = ["std"]
adaptive = ["std", "stats"]
stats = ["dep:atomic-counter", "alloc"]
custom-allocators = ["std", "arena", "stats"]
profiling = ["std", "stats", "backtrace", "dep:backtrace"]
budget = ["stats"]
dashboard = ["std", "stats", "serde", "dep:warp", "dep:tower-http", "dep:tokio", "async"]
streaming = ["std", "alloc"]

compression = ["std", "dep:lz4_flex", "dep:zstd", "dep:snap"]
lz4 = ["compression", "dep:lz4_flex"]
zstd = ["compression", "dep:zstd"]
snappy = ["compression", "dep:snap"]
custom-compression = []

## Platform Support ##
platform = ["std", "dep:libc", "dep:winapi"]
linux-optimizations = ["platform"]
macos-optimizations = ["platform"]
windows-optimizations = ["platform"]
numa-aware = ["platform", "custom-allocators"]
monitoring = ["platform"]
async = ["std", "dep:futures-core", "dep:tokio"]
serde = ["dep:serde", "dep:serde_bytes"]
observability = ["std", "dep:tracing", "dep:prometheus"]

## Development ##
full = [
    "std", "pool", "arena", "cache", "cow",
    "stats", "custom-allocators", "profiling", "budget",
    "platform", "numa-aware", "linux-optimizations", "macos-optimizations",
    "windows-optimizations", "monitoring", "async", "serde", "observability"
]
minimal = ["alloc", "pool", "arena"]

nightly = []

[dependencies]
# Core
cfg-if = "1.0"
dyn-clone = "1.0"
rand = "0.9.1"
spin = { version = "0.9", default-features = false, features = ["mutex", "once", "spin_mutex"] }

# Optional
once_cell = { version = "1.21", optional = true, default-features = false }
thiserror = { version = "2.0", optional = true }
hashbrown = { version = "0.14", optional = true, default-features = false, features = ["ahash"] }
parking_lot = { version = "0.12", optional = true }
atomic-counter = { version = "1.0", optional = true }
futures-core = { version = "0.3", optional = true, default-features = false }
tokio = { version = "1.45", optional = true, default-features = false, features = ["rt", "macros", "rt-multi-thread", "net"] }
serde = { version = "1.0", optional = true, default-features = false, features = ["derive"] }
serde_bytes = { version = "0.11", optional = true }
tracing = { version = "0.1", optional = true, default-features = false }
prometheus = { version = "0.14", optional = true, default-features = false }
backtrace = { version = "0.3", optional = true }
tower-http = { version = "0.6", optional = true, features = ["cors", "fs"] }
lz4_flex = { version = "0.11", optional = true, features = ["frame"] }
zstd = { version = "0.13", optional = true, features = [] }
snap = { version = "1", optional = true }
bincode = {version = "2.0.1", optional = true, default-features = false, features = ["alloc", "serde"] }
warp = { version = "0.3", optional = true }
futures = "0.3.31"

# Platform-specific
[target.'cfg(unix)'.dependencies]
libc = { version = "0.2", optional = true, default-features = false, features = [] }

[target.'cfg(windows)'.dependencies]
winapi = { version = "0.3", optional = true, features = [
    "processthreadsapi", "psapi", "memoryapi", "sysinfoapi"
]}

[dev-dependencies]
# Testing
criterion = { version = "0.6", features = ["html_reports"] }
proptest = "1.7"
quickcheck = "1.0"
arbitrary = { version = "1.4", features = ["derive"] }
tokio = { version = "1.45", features = ["full"] }
tempfile = "3.20"
pretty_assertions = "1.4"


[build-dependencies]
cc = "1.2"
rustc_version = "0.4"

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[badges]
maintenance = { status = "actively-developed" }

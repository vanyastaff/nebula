//! Error code constants for efficient string handling
//!
//! All error codes are defined as constants to avoid string allocations
//! and enable compile-time checking.

// Allow missing docs for self-explanatory error code constants
#![allow(missing_docs)]

// Client error codes
pub const VALIDATION_ERROR: &str = "VALIDATION_ERROR";
pub const NOT_FOUND_ERROR: &str = "NOT_FOUND_ERROR";
pub const INVALID_INPUT_ERROR: &str = "INVALID_INPUT_ERROR";
pub const PERMISSION_DENIED_ERROR: &str = "PERMISSION_DENIED_ERROR";
pub const AUTHENTICATION_ERROR: &str = "AUTHENTICATION_ERROR";
pub const AUTHORIZATION_ERROR: &str = "AUTHORIZATION_ERROR";
pub const SERIALIZATION_ERROR: &str = "SERIALIZATION_ERROR";
pub const DESERIALIZATION_ERROR: &str = "DESERIALIZATION_ERROR";
pub const CONFLICT_ERROR: &str = "CONFLICT_ERROR";
pub const PRECONDITION_FAILED_ERROR: &str = "PRECONDITION_FAILED_ERROR";
pub const REQUEST_TOO_LARGE_ERROR: &str = "REQUEST_TOO_LARGE_ERROR";
pub const UNSUPPORTED_MEDIA_TYPE_ERROR: &str = "UNSUPPORTED_MEDIA_TYPE_ERROR";

// Server error codes
pub const INTERNAL_ERROR: &str = "INTERNAL_ERROR";
pub const SERVICE_UNAVAILABLE_ERROR: &str = "SERVICE_UNAVAILABLE_ERROR";
pub const SERVICE_OVERLOADED_ERROR: &str = "SERVICE_OVERLOADED_ERROR";
pub const CONFIGURATION_ERROR: &str = "CONFIGURATION_ERROR";
pub const DEPENDENCY_FAILURE_ERROR: &str = "DEPENDENCY_FAILURE_ERROR";
pub const MAINTENANCE_ERROR: &str = "MAINTENANCE_ERROR";
pub const NOT_IMPLEMENTED_ERROR: &str = "NOT_IMPLEMENTED_ERROR";
pub const VERSION_MISMATCH_ERROR: &str = "VERSION_MISMATCH_ERROR";

// System error codes
pub const TIMEOUT_ERROR: &str = "TIMEOUT_ERROR";
pub const RATE_LIMIT_ERROR: &str = "RATE_LIMIT_ERROR";
pub const RESOURCE_EXHAUSTED_ERROR: &str = "RESOURCE_EXHAUSTED_ERROR";
pub const NETWORK_ERROR: &str = "NETWORK_ERROR";
pub const DATABASE_ERROR: &str = "DATABASE_ERROR";
pub const EXTERNAL_SERVICE_ERROR: &str = "EXTERNAL_SERVICE_ERROR";
pub const FILE_SYSTEM_ERROR: &str = "FILE_SYSTEM_ERROR";
pub const MEMORY_ERROR: &str = "MEMORY_ERROR";
pub const DISK_SPACE_ERROR: &str = "DISK_SPACE_ERROR";
pub const CONNECTION_ERROR: &str = "CONNECTION_ERROR";
pub const SSL_ERROR: &str = "SSL_ERROR";
pub const DNS_RESOLUTION_ERROR: &str = "DNS_RESOLUTION_ERROR";

// Workflow error codes
pub const WORKFLOW_INVALID_DEFINITION: &str = "WORKFLOW_INVALID_DEFINITION";
pub const WORKFLOW_CIRCULAR_DEPENDENCY: &str = "WORKFLOW_CIRCULAR_DEPENDENCY";
pub const WORKFLOW_MISSING_PARAMETER: &str = "WORKFLOW_MISSING_PARAMETER";
pub const WORKFLOW_INVALID_VERSION: &str = "WORKFLOW_INVALID_VERSION";
pub const WORKFLOW_EXECUTION_LIMIT_EXCEEDED: &str = "WORKFLOW_EXECUTION_LIMIT_EXCEEDED";
pub const WORKFLOW_NOT_FOUND: &str = "WORKFLOW_NOT_FOUND";
pub const WORKFLOW_DISABLED: &str = "WORKFLOW_DISABLED";
pub const WORKFLOW_INVALID_STATE_TRANSITION: &str = "WORKFLOW_INVALID_STATE_TRANSITION";

// Node error codes
pub const NODE_EXECUTION_FAILED: &str = "NODE_EXECUTION_FAILED";
pub const NODE_INVALID_CONFIGURATION: &str = "NODE_INVALID_CONFIGURATION";
pub const NODE_UNSUPPORTED_TYPE: &str = "NODE_UNSUPPORTED_TYPE";
pub const NODE_INPUT_VALIDATION_FAILED: &str = "NODE_INPUT_VALIDATION_FAILED";
pub const NODE_OUTPUT_TRANSFORMATION_FAILED: &str = "NODE_OUTPUT_TRANSFORMATION_FAILED";
pub const NODE_TIMEOUT: &str = "NODE_TIMEOUT";
pub const NODE_DEPENDENCY_NOT_SATISFIED: &str = "NODE_DEPENDENCY_NOT_SATISFIED";
pub const NODE_RESOURCE_LIMIT_EXCEEDED: &str = "NODE_RESOURCE_LIMIT_EXCEEDED";

// Trigger error codes
pub const TRIGGER_INVALID_WEBHOOK_CONFIG: &str = "TRIGGER_INVALID_WEBHOOK_CONFIG";
pub const TRIGGER_INVALID_CRON_EXPRESSION: &str = "TRIGGER_INVALID_CRON_EXPRESSION";
pub const TRIGGER_REGISTRATION_FAILED: &str = "TRIGGER_REGISTRATION_FAILED";
pub const TRIGGER_NOT_FOUND: &str = "TRIGGER_NOT_FOUND";
pub const TRIGGER_AUTHENTICATION_REQUIRED: &str = "TRIGGER_AUTHENTICATION_REQUIRED";
pub const TRIGGER_INVALID_PAYLOAD: &str = "TRIGGER_INVALID_PAYLOAD";
pub const TRIGGER_RATE_LIMIT_EXCEEDED: &str = "TRIGGER_RATE_LIMIT_EXCEEDED";

// Connector error codes
pub const CONNECTOR_CONNECTION_FAILED: &str = "CONNECTOR_CONNECTION_FAILED";
pub const CONNECTOR_API_CALL_FAILED: &str = "CONNECTOR_API_CALL_FAILED";
pub const CONNECTOR_INVALID_CONFIGURATION: &str = "CONNECTOR_INVALID_CONFIGURATION";
pub const CONNECTOR_QUOTA_EXCEEDED: &str = "CONNECTOR_QUOTA_EXCEEDED";
pub const CONNECTOR_SERVICE_UNAVAILABLE: &str = "CONNECTOR_SERVICE_UNAVAILABLE";
pub const CONNECTOR_TRANSFORMATION_FAILED: &str = "CONNECTOR_TRANSFORMATION_FAILED";
pub const CONNECTOR_UNSUPPORTED_OPERATION: &str = "CONNECTOR_UNSUPPORTED_OPERATION";

// Credential error codes
pub const CREDENTIAL_NOT_FOUND: &str = "CREDENTIAL_NOT_FOUND";
pub const CREDENTIAL_INVALID: &str = "CREDENTIAL_INVALID";
pub const CREDENTIAL_MISSING_FIELDS: &str = "CREDENTIAL_MISSING_FIELDS";
pub const CREDENTIAL_DECRYPTION_FAILED: &str = "CREDENTIAL_DECRYPTION_FAILED";
pub const CREDENTIAL_OAUTH_FAILED: &str = "CREDENTIAL_OAUTH_FAILED";
pub const CREDENTIAL_INVALID_API_KEY: &str = "CREDENTIAL_INVALID_API_KEY";
pub const CREDENTIAL_EXPIRED: &str = "CREDENTIAL_EXPIRED";

// Execution error codes
pub const EXECUTION_MEMORY_LIMIT_EXCEEDED: &str = "EXECUTION_MEMORY_LIMIT_EXCEEDED";
pub const EXECUTION_CPU_LIMIT_EXCEEDED: &str = "EXECUTION_CPU_LIMIT_EXCEEDED";
pub const EXECUTION_TIME_LIMIT_EXCEEDED: &str = "EXECUTION_TIME_LIMIT_EXCEEDED";
pub const EXECUTION_CANCELLED: &str = "EXECUTION_CANCELLED";
pub const EXECUTION_CONCURRENCY_LIMIT_REACHED: &str = "EXECUTION_CONCURRENCY_LIMIT_REACHED";
pub const EXECUTION_QUEUE_FULL: &str = "EXECUTION_QUEUE_FULL";
pub const EXECUTION_INVALID_STATE: &str = "EXECUTION_INVALID_STATE";
pub const EXECUTION_DEADLOCK_DETECTED: &str = "EXECUTION_DEADLOCK_DETECTED";

// Error categories
pub const CATEGORY_CLIENT: &str = "CLIENT";
pub const CATEGORY_SERVER: &str = "SERVER";
pub const CATEGORY_SYSTEM: &str = "SYSTEM";
pub const CATEGORY_WORKFLOW: &str = "WORKFLOW";
pub const CATEGORY_NODE: &str = "NODE";
pub const CATEGORY_TRIGGER: &str = "TRIGGER";
pub const CATEGORY_CONNECTOR: &str = "CONNECTOR";
pub const CATEGORY_CREDENTIAL: &str = "CREDENTIAL";
pub const CATEGORY_EXECUTION: &str = "EXECUTION";

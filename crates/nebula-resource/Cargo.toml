[package]
name = "nebula-resource"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
keywords.workspace = true
authors.workspace = true
description.workspace = true
license.workspace = true
repository.workspace = true
homepage.workspace = true
documentation.workspace = true

[features]
default = ["std", "tokio", "serde"]

# Core features
std = ["tokio/rt", "tracing/std"]
alloc = []

# Runtime features
tokio = ["dep:tokio"]
async-std = ["dep:async-std"]

# Serialization
serde = ["dep:serde", "dep:serde_json", "dep:serde_yaml"]

# Observability
metrics = ["dep:metrics", "dep:metrics-exporter-prometheus"]
tracing = ["dep:tracing", "dep:tracing-opentelemetry", "dep:opentelemetry"]

# Security
credentials = ["nebula-credential"]

# Pooling strategies (using custom implementation)
pooling = []

# Database support
postgres = ["dep:sqlx"]
mysql = ["dep:sqlx"]
redis = ["dep:redis"]

# Testing utilities
testing = ["dep:mockall", "dep:test-case"]

# Full feature set (for examples and benchmarks)
full = [
    "std", "tokio", "serde", "metrics", "tracing",
    "credentials", "pooling", "testing"
]

[dependencies]
# Nebula ecosystem
nebula-log = { path = "../nebula-log" }
nebula-error = { path = "../nebula-error" }
nebula-derive = { path = "../nebula-derive" }
nebula-credential = { path = "../nebula-credential", optional = true }

# Async runtime
tokio = { version = "1.0", features = ["rt-multi-thread", "time", "sync", "macros"], optional = true }
async-std = { version = "1.12", optional = true }
futures = "0.3"

# Core utilities
async-trait = "0.1"
pin-project-lite = "0.2"
thiserror = "1.0"
uuid = { version = "1.0", features = ["v4", "serde"] }

# Serialization
serde = { version = "1.0", features = ["derive"], optional = true }
serde_json = { version = "1.0", optional = true }
serde_yaml = { version = "0.9", optional = true }

# Collections and data structures
dashmap = "5.5"
parking_lot = "0.12"
crossbeam = "0.8"

# Observability
tracing = { version = "0.1", optional = true }
tracing-opentelemetry = { version = "0.21", optional = true }
opentelemetry = { version = "0.20", optional = true }
metrics = { version = "0.21", optional = true }
metrics-exporter-prometheus = { version = "0.12", optional = true }

# Time and scheduling
chrono = { version = "0.4", features = ["serde"] }

# Database drivers
sqlx = { version = "0.8", features = ["runtime-tokio", "postgres", "mysql", "uuid", "chrono"], optional = true }
redis = { version = "0.24", features = ["tokio-comp", "connection-manager"], optional = true }

# Resource pooling (custom implementation)
# Note: deadpool and bb8 removed - we use custom pool implementation

# Configuration and validation
config = "0.13"
validator = { version = "0.16", features = ["derive"] }

# Development and testing
mockall = { version = "0.11", optional = true }
test-case = { version = "3.2", optional = true }

[dev-dependencies]
tokio-test = "0.4"
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.2"
test-case = "3.2"
mockall = "0.11"
tempfile = "3.7"
testcontainers = "0.15"
testcontainers-modules = { version = "0.3", features = ["postgres"] }


[lints]
workspace = true

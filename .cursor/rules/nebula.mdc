---
description:
globs:
alwaysApply: true
---
// Project Rules for Nebula Workflow Engine
// Add this as a Project Rule in Cursor

/*
# Nebula Workflow Engine - Development Rules

## Architecture Layers (Dependency Order: Top depends on Bottom)
- Presentation (api, cli, ui, hub)
- Developer Tools (sdk, derive, testing)
- Multi-tenancy (cluster, tenant)
- Execution (engine, runtime, worker)
- Business Logic (resource, registry)
- Node (node, action, parameter, credential)
- Core (workflow, execution, value, memory, expression, eventbus, idempotency)
- Cross-cutting (config, log, metrics, error, resilience, validator, locale, system)
- Infrastructure (storage, binary)

## Core Async Patterns
- Runtime: tokio only with full features
- Channels: bounded mpsc for work, broadcast for events, oneshot for responses
- Cancellation: Always use CancellationToken with select!
- Timeouts: Required at all I/O boundaries (default 30s)
- Backpressure: Bounded queues, reject on overflow

## Action Development
1. SimpleAction - for quick implementations
2. #[derive(Action)] - for full integration
3. ProcessAction - for complex logic with resources

## Resource Scopes
- Global: Application lifetime (connection pools)
- Workflow: Per workflow execution
- Execution: Per single execution
- Action: Per action invocation

## Expression Language
- Node outputs: $nodes.{node_id}.result.{field}
- Variables: $workflow.variables.{name}
- Context: $user.context.{field}

## Error Handling
- Use Result<T, NebulaError> everywhere
- Propagate with ?
- Add context with .context()
- Distinguish retryable vs terminal errors

## Testing Requirements
- Use #[tokio::test(flavor = "multi_thread")]
- No fixed sleeps, use virtual time
- Test cancellation paths
- Mock external dependencies

## Performance Guidelines
- No blocking in async contexts
- Use Arc for sharing, avoid clones
- Stream large payloads
- Pool expensive resources

## Observability
- Structured logging with tracing
- Required fields: execution_id, workflow_id, node_id
- Metrics: nebula_{component}_{metric} naming
- Spans for external calls

## CI Requirements
- cargo fmt --all -- --check
- cargo clippy --workspace -- -D warnings
- cargo test --workspace
- cargo doc --no-deps --workspace
*/
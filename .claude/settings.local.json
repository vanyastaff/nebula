{
  "permissions": {
    "allow": [
      "Bash(cargo test:*)",
      "Bash(cargo check:*)",
      "Bash(find:*)",
      "Bash(timeout 10 cargo check)",
      "Bash(rustc:*)",
      "Bash(../../test_resilience_integration.exe)",
      "Bash(cargo build:*)",
      "Bash(cargo run:*)",
      "Bash(cargo clean:*)",
      "Bash(git commit:*)",
      "Bash(git add:*)",
      "Bash(cargo clippy:*)",
      "Bash(RUSTFLAGS=\"\" cargo check)",
      "Bash(cargo install:*)",
      "Bash(rustup toolchain:*)",
      "Bash(rustup:*)",
      "Bash(cargo doc:*)",
      "Bash(cargo bench:*)",
      "Bash(git checkout:*)",
      "Bash(mkdir:*)",
      "Bash(git push:*)",
      "Bash(for:*)",
      "Bash(do [ ! -f \"$dir/mod.rs\" ])",
      "Bash(touch:*)",
      "Bash(done)",
      "Bash([ -f kind.rs ])",
      "Bash(cat:*)",
      "Bash(timeout 120 cargo build -p nebula-memory)",
      "Bash(git reset:*)",
      "Bash(timeout 120 cargo build -p nebula-memory --all-features)",
      "Bash(do [ -d \"$dir\" ])",
      "Bash(python3:*)",
      "Bash(perl:*)",
      "Bash(awk:*)",
      "Bash(1)",
      "Bash(do)",
      "Bash(cargo fix:*)",
      "Bash(timeout 120 cargo test -p nebula-memory --all-features --lib)",
      "Bash(git restore:*)",
      "Bash(cargo:*)",
      "Bash(MIRIFLAGS=\"-Zmiri-permissive-provenance\" cargo +nightly miri test --test miri_safety -- miri_bump_allocator_basic)",
      "Bash(export MIRIFLAGS=\"-Zmiri-permissive-provenance\")",
      "Bash(rm:*)",
      "Bash(tree:*)",
      "Bash(test:*)",
      "Bash(timeout 180 cargo test --test validator_derive)",
      "Bash(if grep -q \"#\\[cfg(test)\\]\" \"$file\")",
      "Bash(then)",
      "Bash(fi)",
      "Bash(do echo \"=== $file ===\" grep \"#\\[cfg(test)\\]\" -A 5 \"crates/nebula-validator/src/combinators/$file\")",
      "Bash(timeout 120 cargo test -p nebula-validator --lib)",
      "Bash(timeout 120 cargo check -p nebula-validator)",
      "Bash(timeout 120 cargo test -p nebula-validator --lib combinators::field)",
      "Bash(timeout 120 cargo test -p nebula-validator --lib field::tests)",
      "Bash(timeout 180 cargo test --test field_combinator_test)",
      "Bash(timeout 180 cargo test -p nebula-validator --lib field::tests)",
      "Bash(timeout 180 cargo test -p nebula-validator --lib field)",
      "Bash(timeout 180 cargo test -p nebula-validator --lib error::tests)",
      "Bash(timeout 180 cargo test --test combinator_error_test)",
      "Bash(timeout 180 cargo test -p nebula-validator --lib context::tests)",
      "Bash(timeout 180 cargo test test_context_ --lib)",
      "Bash(timeout 180 cargo test --test validation_context_test)",
      "Bash(timeout 180 cargo test test_child_context --test validation_context_test)",
      "Bash(timeout 180 cargo test --test optimizer_test)",
      "Bash(timeout 180 cargo test -p nebula-validator field --lib)",
      "Bash(timeout 180 cargo test -p nebula-derive --test text_validators)",
      "Bash(timeout 180 cargo test -p nebula-derive --lib)",
      "Bash(timeout 60 cargo check -p nebula-derive)",
      "Bash(timeout 180 cargo test --lib)",
      "Bash(timeout 180 cargo test --test quick_test --no-default-features)",
      "Bash(timeout 60 cargo test --lib)",
      "Bash(timeout 180 cargo test -p nebula-derive --lib --no-fail-fast)",
      "Bash(git rm:*)",
      "Bash(timeout 120 cargo check -p nebula-parameter)",
      "Bash(timeout 180 cargo test --test collection_test -p nebula-parameter --no-run)",
      "Bash(timeout 180 cargo check -p nebula-parameter)",
      "Bash(timeout 120 cargo check -p nebula-expression)",
      "Bash(timeout 180 cargo test --test manual_benchmarks -- --ignored --nocapture)",
      "Bash(timeout 180 cargo build -p nebula-expression --release)",
      "Bash(timeout 180 cargo bench -p nebula-expression --no-run)",
      "Bash(timeout 240 cargo bench -p nebula-expression --no-run)",
      "Bash(timeout 180 cargo bench -p nebula-expression baseline)",
      "Bash(timeout:*)",
      "Bash(tee:*)",
      "Bash(RUST_BACKTRACE=1 cargo test test_parser_recursion_depth_safe --lib -- --nocapture)",
      "Bash(export RUST_BACKTRACE=1)",
      "Bash(xargs cat:*)",
      "Bash(do if [ -d \"$dir\" ])",
      "Read(//c/Users/vanya/**)",
      "Bash(git stash:*)",
      "Read(//c/**)",
      "Bash(paste:*)",
      "Bash(bc)",
      "Bash(git mv:*)",
      "Bash(tokio tree:*)",
      "Bash(wsl:*)",
      "Bash(tokei:*)",
      "Bash(cut:*)",
      "Read(//c//**)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(do echo \"=== $dir ===\")",
      "Bash(sort:*)",
      "Bash(do echo \"=== darling_core@$ver ===\")",
      "Bash(rg:*)",
      "Bash(while read file)",
      "Bash(echo:*)",
      "Bash(do basename \"$f\")",
      "Bash(do echo \"=== $crate ===\")",
      "Bash(gh:*)",
      "Bash(pwsh:*)",
      "Bash(cd:*)",
      "Bash(xargs:*)",
      "Bash(do grep -A 2 \"^#\\[cfg(test)\\]\" \"$file\")",
      "Bash(do echo -n \"$crate: \")",
      "Bash(do sed -i 's/yaml_rust/yaml_rust2/g' \"$file\")",
      "Bash(do sed -i 's/NebulaError::/ValueError::/g' \"$file\")",
      "Bash(do sed -i 's|use crate::core::error::ValueErrorExt;|use crate::core::error::ValueErrorExt;\\nuse crate::core::{ValueError, ValueResult};|' \"$file\")",
      "Bash(do sed -i 's/type Err = NebulaError/type Err = ValueError/g; s/type Error = NebulaError/type Error = ValueError/g' \"$file\")",
      "Bash(do echo \"=== $crate/Cargo.toml ===\")",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(then head -20 \"$file\")",
      "Bash(do sed -i '0,/use crate::core::error::{ExpressionError, ExpressionErrorExt};/{//d;}' \"$file\")",
    ],
    "deny": [],
    "ask": []
  }
}

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/crates/nebula-log/src/layer/fields.rs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/crates/nebula-log/src/layer/fields.rs" />
              <option name="originalContent" value="//! Layer for injecting global fields&#10;&#10;use crate::config::Fields;&#10;use tracing::{Event, Subscriber};&#10;use tracing_subscriber::{&#10;    layer::{Context, Layer},&#10;    registry::LookupSpan,&#10;};&#10;&#10;/// Layer that adds global fields to spans&#10;pub struct FieldsLayer {&#10;    fields: Fields,&#10;}&#10;&#10;impl FieldsLayer {&#10;    pub fn new(fields: Fields) -&gt; Self {&#10;        Self { fields }&#10;    }&#10;}&#10;&#10;impl&lt;S&gt; Layer&lt;S&gt; for FieldsLayer&#10;where&#10;    S: Subscriber + for&lt;'a&gt; LookupSpan&lt;'a&gt;,&#10;{&#10;    fn on_new_span(&#10;        &amp;self,&#10;        attrs: &amp;tracing::span::Attributes&lt;'_&gt;,&#10;        id: &amp;tracing::span::Id,&#10;        ctx: Context&lt;'_, S&gt;,&#10;    ) {&#10;        // Fields are handled via root span in builder&#10;    }&#10;&#10;    fn on_event(&amp;self, event: &amp;Event&lt;'_&gt;, ctx: Context&lt;'_, S&gt;) {&#10;        // Context fields could be injected here if needed&#10;        // For now, we rely on the root span approach&#10;        // For now, we rely on the root span approach&#10;    }&#10;}" />
              <option name="updatedContent" value="//! Layer for injecting global fields&#10;&#10;use crate::config::Fields;&#10;use tracing::{Event, Subscriber};&#10;use tracing_subscriber::{&#10;    layer::{Context, Layer},&#10;    registry::LookupSpan,&#10;};&#10;&#10;/// Layer that adds global fields to spans&#10;pub struct FieldsLayer {&#10;    fields: Fields,&#10;}&#10;&#10;impl FieldsLayer {&#10;    pub fn new(fields: Fields) -&gt; Self {&#10;        Self { fields }&#10;    }&#10;}&#10;&#10;impl&lt;S&gt; Layer&lt;S&gt; for FieldsLayer&#10;where&#10;    S: Subscriber + for&lt;'a&gt; LookupSpan&lt;'a&gt;,&#10;{&#10;    fn on_new_span(&#10;        &amp;self,&#10;        _attrs: &amp;tracing::span::Attributes&lt;'_&gt;,&#10;        _id: &amp;tracing::span::Id,&#10;        _ctx: Context&lt;'_, S&gt;,&#10;    ) {&#10;        // TODO: Add global fields to span&#10;    }&#10;&#10;    fn on_event(&amp;self, _event: &amp;Event&lt;'_&gt;, _ctx: Context&lt;'_, S&gt;) {&#10;        // TODO: Add global fields to event&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>